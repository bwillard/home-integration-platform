<?xml version="1.0"?>
<doc>
<assembly>
<name>
ControlThink.ZWave
</name>
</assembly>
<members>
<member name="M:ControlThink.ZWave.Devices.ZWaveDevice.Dispose">
	<summary>
 Releases all resources used by the ControlThink.ZWave.Devices.ZWaveDevice.
 </summary>
	<remarks></remarks>
</member><member name="P:ControlThink.ZWave.Devices.ZWaveDevice.NodeID">
	<summary>
 Gets the Node ID of this device.
 </summary>
	<value></value>
	<returns></returns>
	<remarks>Each device in the network is given a network-unique Node ID when it is added to the network.  Combined with
 the Home ID, this gives each device a globally unique identity.</remarks>
</member><member name="P:ControlThink.ZWave.Devices.ZWaveDevice.Tag">
	<summary>
 Gets or sets the object that contains data about the ZWaveDevice.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:ControlThink.ZWave.Devices.ZWaveDevice.Groups">
	<summary>
 Gets the association groups associated with the ZWaveDevice.
 </summary>
	<value></value>
	<returns></returns>
	<remarks>These groups should not be confused with a ZWaveController's ReplicationGroups, which are used to transfer 
 groups of devices between controllers.</remarks>
</member><member name="P:ControlThink.ZWave.Devices.ZWaveDevice.Scenes">
	<summary>
 Gets the scenes programmed into a ZWaveDevice.
 </summary>
	<value></value>
	<returns></returns>
	<remarks>These scenes, made up of devices and their levels, are stored in the target device.
 
 Not all Z-Wave devices support this advanced functionality.</remarks>
</member><member name="P:ControlThink.ZWave.Devices.ZWaveDevice.ConfigurationParameters">
	<summary>
 Gets the configuration parameters of a ZWaveDevice.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:ControlThink.ZWave.Devices.ZWaveDevice.PowerOn">
	<summary>
 If available, powers on the device; this is analagous to setting Level to 255.
 </summary>
	<remarks></remarks>
</member><member name="M:ControlThink.ZWave.Devices.ZWaveDevice.PowerOff">
	<summary>
 If available, powers off the device; this is analagous to setting Level to 0.
 </summary>
	<remarks></remarks>
</member><member name="M:ControlThink.ZWave.Devices.ZWaveDevice.Ping">
	<summary>
 Pings the device.
 </summary>
	<remarks></remarks>
</member><member name="M:ControlThink.ZWave.Devices.ZWaveDevice.AllOn">
	<summary>
 Sends the All On command to a device.
 </summary>
	<remarks>A device will only respond to this command if its AllOnEnabled property has been set to True.</remarks>
</member><member name="M:ControlThink.ZWave.Devices.ZWaveDevice.AllOff">
	<summary>
 Sends the All Off command to a device.
 </summary>
	<remarks>A device will only respond to this command if its AllOffEnabled property has been set to True.</remarks>
</member><member name="P:ControlThink.ZWave.Devices.ZWaveDevice.AllOnEnabled">
	<summary>
 Gets or sets the All On Enabled state of a device.  This is persisted by the target device.
 </summary>
	<value></value>
	<returns></returns>
	<remarks>Not all Z-Wave devices support this advanced functionality.</remarks>
</member><member name="P:ControlThink.ZWave.Devices.ZWaveDevice.AllOffEnabled">
	<summary>
 Gets or sets the All Off Enabled state of a device.  This is persisted by the target device.
 </summary>
	<value></value>
	<returns></returns>
	<remarks>Not all Z-Wave devices support this advanced functionality.</remarks>
</member><member name="P:ControlThink.ZWave.Devices.ZWaveDevice.Level">
	<summary>
 Gets or sets the level of the device.
 Level is device-specific, but often 0 is off, 1 through 99 is a percentage, and 255 is a percentage-unknown on state."
 </summary>
	<value></value>
	<returns></returns>
	<remarks>This feature is used for basic interoperability between Z-Wave devices.
 
 Not all Z-Wave devices support this functionality.</remarks>
</member><member name="P:ControlThink.ZWave.Devices.ZWaveDevice.PollEnabled">
	<summary>
 Gets or sets a value indicating whether the device will be polled for property updates.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:ControlThink.ZWave.Devices.ZWaveDevice.PollInterval">
	<summary>
 Gets or sets a value indicating how frequently a device will be polled for property updates.
 PollEnabled must be set to True for this property to have any effect.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:ControlThink.ZWave.Devices.ZWaveDevice.Name">
	<summary>
 Gets or sets a name for the device (max: 16 chars).  This is persisted inside the device.
 </summary>
	<value></value>
	<returns></returns>
	<remarks>Not all Z-Wave devices support this advanced functionality.</remarks>
</member><member name="P:ControlThink.ZWave.Devices.ZWaveDevice.Location">
	<summary>
 Gets or sets a location for the device (max: 16 chars).  This is persisted inside the device.
 </summary>
	<value></value>
	<returns></returns>
	<remarks>Not all Z-Wave devices support this advanced functionality.</remarks>
</member><member name="T:ControlThink.ZWave.Devices.ZWaveDevice">
	<summary>
 A generic device in a Z-Wave network; all devices inherit from this object unless their type is unknown.
 </summary>
	<remarks></remarks>
</member><member name="P:ControlThink.ZWave.Devices.Controller.IsPrimaryController">
	<summary>
 Indicates if the controller is the Primary Controller in the network.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:ControlThink.ZWave.Devices.Controller">
	<summary>
 A portable Z-Wave controller
 </summary>
	<remarks></remarks>
</member><member name="P:ControlThink.ZWave.Devices.StaticController.IsPrimaryController">
	<summary>
 Indicates if the controller is the Primary Controller in the network.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:ControlThink.ZWave.Devices.StaticController.IsStaticUpdateController">
	<summary>
 Indicates if the controller is the Static Update Controller (SUC) in the network.
 </summary>
	<value></value>
	<returns></returns>
	<remarks>The Static Update Controller can create a new Primary controller if the Primary controller is lost or broken.</remarks>
</member><member name="T:ControlThink.ZWave.Devices.StaticController">
	<summary>
 A stationary Z-Wave controller
 </summary>
	<remarks></remarks>
</member><member name="T:ControlThink.ZWave.Devices.AVControlPoint">
	<summary>
 A Z-Wave AV control point.
 </summary>
	<remarks></remarks>
</member><member name="T:ControlThink.ZWave.Devices.Thermostat">
	<summary>
 A general Z-Wave thermostat; see Specific Thermostat device types for advanced functionality.
 </summary>
	<remarks></remarks>
</member><member name="T:ControlThink.ZWave.Devices.WindowCovering">
	<summary>
 A generic Z-Wave window covering; see Specific WindowCovering device types for advanced functionality.
 </summary>
	<remarks></remarks>
</member><member name="T:ControlThink.ZWave.Devices.RepeaterSlave">
	<summary>
 A Z-Wave repeater slave
 </summary>
	<remarks></remarks>
</member><member name="T:ControlThink.ZWave.Devices.BinarySwitch">
	<summary>
 A Z-Wave Binary Switch, typically an on/off switch or plug-in appliance module
 </summary>
	<remarks></remarks>
</member><member name="M:ControlThink.ZWave.Devices.MultilevelSwitch.StartBrighten">
	<summary>
 Start to brighten (or open/raise) the device.
 </summary>
	<remarks></remarks>
</member><member name="M:ControlThink.ZWave.Devices.MultilevelSwitch.StartBrighten(System.Byte)">
	<summary>
 Start to brighten (or open/raise) the device, starting at startLevel.
 </summary>
	<param name="startLevel">The level to start brightening from.</param>
	<remarks></remarks>
</member><member name="M:ControlThink.ZWave.Devices.MultilevelSwitch.StopBrighten">
	<summary>
 Stop brightening (or opening/raising) the device.
 </summary>
	<remarks></remarks>
</member><member name="M:ControlThink.ZWave.Devices.MultilevelSwitch.StartDim">
	<summary>
 Start to dim (or close/lower) the device.
 </summary>
	<remarks></remarks>
</member><member name="M:ControlThink.ZWave.Devices.MultilevelSwitch.StartDim(System.Byte)">
	<summary>
 Start to dim (or close/lower) the device, starting at startLevel.
 </summary>
	<param name="startLevel">The level to start dimming from.</param>
	<remarks></remarks>
</member><member name="M:ControlThink.ZWave.Devices.MultilevelSwitch.StopDim">
	<summary>
 Stop dimming (or closing/lowering) the device.
 </summary>
	<remarks></remarks>
</member><member name="T:ControlThink.ZWave.Devices.MultilevelSwitch">
	<summary>
 A Z-Wave Multilevel Switch, typically a dimmer switch, plug-in lamp module, or motor controller.
 </summary>
	<remarks></remarks>
</member><member name="T:ControlThink.ZWave.Devices.RemoteSwitch">
	<summary>
 A Z-Wave remote switch.  
 Often referred to as a "virtual" switch.
 </summary>
	<remarks></remarks>
</member><member name="T:ControlThink.ZWave.Devices.ToggleSwitch">
	<summary>
 A Z-Wave toggle switch.
 </summary>
	<remarks></remarks>
</member><member name="T:ControlThink.ZWave.Devices.BinarySensor">
	<summary>
 A Z-Wave binary (on/off) sensor, such as a simple motion sensor.
 </summary>
	<remarks></remarks>
</member><member name="T:ControlThink.ZWave.Devices.Specific.PortableRemoteController">
	<summary>
 A portable Z-Wave controller.
 </summary>
	<remarks></remarks>
</member><member name="T:ControlThink.ZWave.Devices.Specific.PortableSceneController">
	<summary>
 A portable Z-Wave scene controller.
 </summary>
	<remarks></remarks>
</member><member name="T:ControlThink.ZWave.Devices.Specific.PcController">
	<summary>
 A stationary Z-Wave PC controller, often a USB dongle or Ethernet bridge representing the attached PC.
 </summary>
	<remarks></remarks>
</member><member name="T:ControlThink.ZWave.Devices.Specific.SceneController">
	<summary>
 A stationary Z-Wave scene controller, such as an in-wall single- or multi-button controller.
 </summary>
	<remarks></remarks>
</member><member name="T:ControlThink.ZWave.Devices.Specific.BinaryPowerSwitch">
	<summary>
 A Z-Wave binary (on/off) power switch.
 </summary>
	<remarks></remarks>
</member><member name="T:ControlThink.ZWave.Devices.Specific.BinarySceneSwitch">
	<summary>
 A Z-Wave binary (on/off) scene switch.
 </summary>
	<remarks></remarks>
</member><member name="T:ControlThink.ZWave.Devices.Specific.MultilevelPowerSwitch">
	<summary>
 A Z-Wave multilevel (dimmable) power switch.
 </summary>
	<remarks></remarks>
</member><member name="T:ControlThink.ZWave.Devices.Specific.MultilevelSceneSwitch">
	<summary>
 A Z-Wave multilevel (dimmable) scene switch.
 </summary>
	<remarks></remarks>
</member><member name="T:ControlThink.ZWave.Devices.Specific.MultipositionMotor">
	<summary>
 A Z-Wave motor controller, often a window covering or plasma lift.
 </summary>
	<remarks></remarks>
</member><member name="T:ControlThink.ZWave.Devices.Specific.SatelliteReceiver">
	<summary>
 A Z-Wave satellite receiver.
 </summary>
	<remarks></remarks>
</member><member name="P:ControlThink.ZWave.Devices.Specific.GeneralThermostat.ThermostatMode">
	<summary>
 Get or set the current thermostat mode.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:ControlThink.ZWave.Devices.Specific.GeneralThermostat.SupportedThermostatModes">
	<summary>
 Gets a list of thermostat modes supported by this general thermostat.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:ControlThink.ZWave.Devices.Specific.GeneralThermostat.ThermostatOperatingState">
	<summary>
 Get or set the current thermostat operating state (cooling, heating, etc.)
 </summary>
	<value></value>
	<returns></returns>
	<remarks>Not all thermostats support this advanced functionality.</remarks>
</member><member name="P:ControlThink.ZWave.Devices.Specific.GeneralThermostat.ThermostatSetpoints">
	<summary>
 The collection of setpoints used by this thermostat.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:ControlThink.ZWave.Devices.Specific.GeneralThermostat.SupportedThermostatSetpoints">
	<summary>
 Gets a list of setpoints supported by this thermostat.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:ControlThink.ZWave.Devices.Specific.GeneralThermostat.ThermostatFanMode">
	<summary>
 Get or set the current thermostat fan mode.
 </summary>
	<value></value>
	<returns></returns>
	<remarks>Not all thermostats support this advanced functionality.</remarks>
</member><member name="P:ControlThink.ZWave.Devices.Specific.GeneralThermostat.SupportedThermostatFanModes">
	<summary>
 Gets a list of thermostat fan modes supported by this general thermostat.
 </summary>
	<value></value>
	<returns></returns>
	<remarks>Not all thermostats support this advanced functionality.</remarks>
</member><member name="P:ControlThink.ZWave.Devices.Specific.GeneralThermostat.ThermostatFanState">
	<summary>
 Get or set the current thermostat fan state (RunningHigh, Idle, etc.)
 </summary>
	<value></value>
	<returns></returns>
	<remarks>Not all thermostats support this advanced functionality.</remarks>
</member><member name="P:ControlThink.ZWave.Devices.Specific.GeneralThermostat.ThermostatTemperature">
	<summary>
 Gets the current thermostat temperature.
 </summary>
	<value></value>
	<returns></returns>
	<remarks>Not all thermostats support this advanced functionality.</remarks>
</member><member name="T:ControlThink.ZWave.Devices.Specific.GeneralThermostat">
	<summary>
 A Z-Wave general thermostat, often used to control HVAC systems.
 </summary>
	<remarks></remarks>
</member><member name="P:ControlThink.ZWave.Devices.Specific.GeneralThermostatV2.ThermostatMode">
	<summary>
 Get or set the current thermostat mode.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:ControlThink.ZWave.Devices.Specific.GeneralThermostatV2.SupportedThermostatModes">
	<summary>
 Gets a list of thermostat modes supported by this general thermostat.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:ControlThink.ZWave.Devices.Specific.GeneralThermostatV2.ThermostatOperatingState">
	<summary>
 Get or set the current thermostat operating state (cooling, heating, etc.)
 </summary>
	<value></value>
	<returns></returns>
	<remarks>Not all thermostats support this advanced functionality.</remarks>
</member><member name="P:ControlThink.ZWave.Devices.Specific.GeneralThermostatV2.ThermostatSetpoints">
	<summary>
 The collection of setpoints used by this thermostat.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:ControlThink.ZWave.Devices.Specific.GeneralThermostatV2.SupportedThermostatSetpoints">
	<summary>
 Gets a list of setpoints supported by this thermostat.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:ControlThink.ZWave.Devices.Specific.GeneralThermostatV2.ThermostatFanMode">
	<summary>
 Get or set the current thermostat fan mode.
 </summary>
	<value></value>
	<returns></returns>
	<remarks>Not all thermostats support this advanced functionality.</remarks>
</member><member name="P:ControlThink.ZWave.Devices.Specific.GeneralThermostatV2.SupportedThermostatFanModes">
	<summary>
 Gets a list of thermostat fan modes supported by this general thermostat.
 </summary>
	<value></value>
	<returns></returns>
	<remarks>Not all thermostats support this advanced functionality.</remarks>
</member><member name="P:ControlThink.ZWave.Devices.Specific.GeneralThermostatV2.ThermostatFanState">
	<summary>
 Get or set the current thermostat fan state (RunningHigh, Idle, etc.)
 </summary>
	<value></value>
	<returns></returns>
	<remarks>Not all thermostats support this advanced functionality.</remarks>
</member><member name="P:ControlThink.ZWave.Devices.Specific.GeneralThermostatV2.ThermostatTemperature">
	<summary>
 Gets the current thermostat temperature.
 </summary>
	<value></value>
	<returns></returns>
	<remarks>Not all thermostats support this advanced functionality.</remarks>
</member><member name="T:ControlThink.ZWave.Devices.Specific.GeneralThermostatV2">
	<summary>
 A Z-Wave general thermostat, often used to control HVAC systems.
 </summary>
	<remarks></remarks>
</member><member name="M:ControlThink.ZWave.Devices.Specific.SimpleWindowCovering.StartOpen">
	<summary>
 Start to open the window covering.
 </summary>
	<remarks></remarks>
</member><member name="M:ControlThink.ZWave.Devices.Specific.SimpleWindowCovering.StartClose">
	<summary>
 Start to close the window covering.
 </summary>
	<remarks></remarks>
</member><member name="M:ControlThink.ZWave.Devices.Specific.SimpleWindowCovering.StopOpen">
	<summary>
 Stop opening the window covering.
 </summary>
	<remarks></remarks>
</member><member name="M:ControlThink.ZWave.Devices.Specific.SimpleWindowCovering.StopClose">
	<summary>
 Stop closing the window covering.
 </summary>
	<remarks></remarks>
</member><member name="T:ControlThink.ZWave.Devices.Specific.SimpleWindowCovering">
	<summary>
 A Z-Wave Simple Window Covering, used by some window shades.  Others use MultipositionMotor.
 </summary>
	<remarks></remarks>
</member><member name="T:ControlThink.ZWave.Devices.Specific.BasicRepeaterSlave">
	<summary>
 A Z-Wave Basic Repeater Slave, generally used to repeat Z-Wave signals.
 </summary>
	<remarks></remarks>
</member><member name="T:ControlThink.ZWave.Devices.Specific.BinaryRemoteSwitch">
	<summary>
 A Z-Wave binary (on/off) remote switch.
 </summary>
	<remarks></remarks>
</member><member name="T:ControlThink.ZWave.Devices.Specific.MultilevelRemoteSwitch">
	<summary>
 A Z-Wave multilevel (dimmable) remote switch.
 </summary>
	<remarks></remarks>
</member><member name="T:ControlThink.ZWave.Devices.Specific.BinaryToggleRemoteSwitch">
	<summary>
 A Z-Wave binary (on/off) toggle remote switch.
 </summary>
	<remarks></remarks>
</member><member name="T:ControlThink.ZWave.Devices.Specific.MultilevelToggleRemoteSwitch">
	<summary>
 A Z-Wave multilevel (dimmable) toggle remote switch.
 </summary>
	<remarks></remarks>
</member><member name="T:ControlThink.ZWave.Devices.Specific.RoutingBinarySensor">
	<summary>
 A Z-Wave routing binary sensor.
 </summary>
	<remarks></remarks>
</member><member name="T:ControlThink.ZWave.ControllerNotRespondingException">
	<summary>
 The exception that is thrown when the connected Z-Wave Controller did not respond properly.
 </summary>
	<remarks></remarks>
</member><member name="T:ControlThink.ZWave.CommandAbortedException">
	<summary>
 The exception that is thrown when the current command has been aborted.
 </summary>
	<remarks></remarks>
</member><member name="T:ControlThink.ZWave.DeviceNotRespondingException">
	<summary>
 The exception that is thrown when the target device does not respond to our request.
 </summary>
	<remarks></remarks>
</member><member name="T:ControlThink.ZWave.NetworkBusyException">
	<summary>
 The exception that is thrown when the network is too busy; please try again later.
 </summary>
	<remarks></remarks>
</member><member name="T:ControlThink.ZWave.CommandTimeoutException">
	<summary>
 The exception that is thrown when the request has timed out.
 </summary>
	<remarks></remarks>
</member><member name="T:ControlThink.ZWave.CommandNotStartedTimeoutException">
	<summary>
 The exception that is thrown when the command timed out before it could be issued to the device.
 </summary>
	<remarks></remarks>
</member><member name="T:ControlThink.ZWave.CommandResponseInvalidException">
	<summary>
 The exception that is thrown when an invalid response is received.
 </summary>
	<remarks></remarks>
</member><member name="T:ControlThink.ZWave.CommandRejectedException">
	<summary>
 The exception that is thrown when the request is rejected by the target device.
 </summary>
	<remarks>This can occur when a device is in a security mode which forbids the request, is in an invalid state, etc.</remarks>
</member><member name="T:ControlThink.ZWave.CommandDelayedException">
	<summary>
 The exception that is thrown when the target device has queued the request for later operation.
 </summary>
	<remarks>This exception should be used for informational purposes, and the request should not be repeated.</remarks>
</member><member name="P:ControlThink.ZWave.DeviceBusyException.TimeToWait">
	<summary>
 Gets the amount of time to wait before resubmitting the request (or zero to wait until later)
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:ControlThink.ZWave.DeviceBusyException">
	<summary>
 The exception that is thrown when the target device is too busy to process the request.
 </summary>
	<remarks>If TimeToWait is greater than zero seconds, wait that amount of time before resubmitting the request; otherwise, wait until later to resubmit.</remarks>
</member><member name="T:ControlThink.ZWave.Stopwatch">
	<summary>
 This Stopwatch is designed to provide System.Diagnostics.Stopwatch capabilities where otherwise unavailable
 </summary>
</member><member name="T:ControlThink.ZWave.ZWaveController.DeviceUpdateEventHandler">
	<summary>
 Represents the event handler that will handle a DeviceAdded/Removed/Replaced event.
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="E:ControlThink.ZWave.ZWaveController.DeviceAdded">
	<summary>
 This event occurs when a device is added to the network (or when a device is first discovered upon connection).
 </summary>
	<remarks></remarks>
</member><member name="E:ControlThink.ZWave.ZWaveController.DeviceRemoved">
	<summary>
 This event occurs when a device is removed from the network.
 </summary>
	<remarks></remarks>
</member><member name="E:ControlThink.ZWave.ZWaveController.DeviceReplaced">
	<summary>
 This event occurs when a device is replaced in the network.
 </summary>
	<remarks>The replaced device will have the same Node ID as the original device.</remarks>
</member><member name="T:ControlThink.ZWave.ZWaveController.SceneActivatedEventHandler">
	<summary>
 Represents the event handler that will handle a SceneActivated event.
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="E:ControlThink.ZWave.ZWaveController.SceneActivated">
	<summary>
 This event occurs when the active scene is changed in our device by a device on our network.
 </summary>
	<remarks></remarks>
</member><member name="T:ControlThink.ZWave.ZWaveController.LevelChangedEventHandler">
	<summary>
 Represents the event handler that will handle a LevelChanged event.
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="E:ControlThink.ZWave.ZWaveController.LevelChanged">
	<summary>
 This event occurs when our virtual indicator level is changed by a device on our network.
 </summary>
	<remarks></remarks>
</member><member name="T:ControlThink.ZWave.ZWaveController.ConfigurationChangeEventHandler">
	<summary>
 Represents the event handler that will handle a BeforeConfigurationChange or AfterConfigurationChange event.
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="E:ControlThink.ZWave.ZWaveController.BeforeConfigurationChange">
	<summary>
 This event occurs before the ZWaveController's configuration changes during a ReceiveConfiguration operation.
 </summary>
	<remarks></remarks>
</member><member name="E:ControlThink.ZWave.ZWaveController.AfterConfigurationChange">
	<summary>
 This event occurs after the ZWaveController's configuration changes during a ReceiveConfiguration operation.
 </summary>
	<remarks></remarks>
</member><member name="E:ControlThink.ZWave.ZWaveController.ControllerNotResponding">
	<summary>
 This event occurs when the attached controller is not responding.  This may indicate a transitory issue or a permanent fault.
 </summary>
	<remarks></remarks>
</member><member name="T:ControlThink.ZWave.ZWaveController.ReplicationGroup">
	<summary>
 A group of devices, to be sent or received when adding a controller into the network or being added to the network.
 </summary>
	<remarks></remarks>
</member><member name="T:ControlThink.ZWave.ZWaveController.ReplicationScene">
	<summary>
 A group of devices and their associated levels, to be sent or received when adding a controller into the network or being added to the network.
 </summary>
	<remarks></remarks>
</member><member name="T:ControlThink.ZWave.ZWaveController.ReplicationSceneItem">
	<summary>
 A device and its level, to be sent or received in a ReplicationSceneCollection when adding a controller into the network or being added to the network.
 </summary>
	<remarks></remarks>
</member><member name="T:ControlThink.ZWave.ZWaveController.ReplicationSceneItemCollection">
	<summary>
 A collection of devices and their levels, to be sent or received in a ReplicationScene when adding a controller into the network or being added to the network.
 </summary>
	<remarks></remarks>
</member><member name="M:ControlThink.ZWave.ZWaveController.Connect">
	<summary>
 Connects to a Z-Wave USB dongle or Ethernet bridge
 </summary>
	<remarks></remarks>
</member><member name="M:ControlThink.ZWave.ZWaveController.Connect(System.String)">
	<summary>
 Connects to a Z-Wave serial controller.
 </summary>
	<param name="portName">The COM port of a Z-Wave serial controller (ex: "COM1")</param>
	<remarks></remarks>
</member><member name="M:ControlThink.ZWave.ZWaveController.Connect(System.Net.IPEndPoint)">
	<summary>
 Connects to a Z-Wave Ethernet bridge.
 </summary>
	<param name="ipEndPoint">The IPEndPoint of a Z-Wave Ethernet bridge</param>
	<remarks></remarks>
</member><member name="M:ControlThink.ZWave.ZWaveController.RemoveFailedDevice(ControlThink.ZWave.Devices.ZWaveDevice)">
	<summary>
 Removes a broken/missing device from the ZWaveController's network map.
 </summary>
	<param name="device">The broken/missing ZWaveDevice to remove</param>
	<returns>True if the removal process succeeded; False if the device is not broken or could not be removed.</returns>
	<remarks></remarks>
</member><member name="M:ControlThink.ZWave.ZWaveController.BeginReplaceFailedDevice(ControlThink.ZWave.Devices.ZWaveDevice,System.AsyncCallback,System.Object)">
	<summary>
 Begins an asynchronous operation to replace a broken/missing device with a new device.
 </summary>
	<param name="device">The broken/missing ZWaveDevice to replace</param>
	<param name="requestCallback">An optional asynchronous callback, to be called when the operation is complete</param>
	<param name="stateObject">A user-provided object that distinguishes this particular asynchronous request from other requests</param>
	<returns>A System.IAsyncResult that references the asynchronous operation</returns>
	<remarks></remarks>
</member><member name="M:ControlThink.ZWave.ZWaveController.EndReplaceFailedDevice(System.IAsyncResult)">
	<summary>
 Ends a pending broken/missing device replacement
 </summary>
	<param name="asyncResult">A System.IAsyncResult that references the asynchronous operation</param>
	<returns>A ZWaveDevice object representing the new device, or Nothing if the operation failed</returns>
	<remarks></remarks>
</member><member name="M:ControlThink.ZWave.ZWaveController.ReplaceFailedDevice(ControlThink.ZWave.Devices.ZWaveDevice)">
	<summary>
 Replaces a broken/missing device with a new device, preserving the same Node ID.
 </summary>
	<param name="device">The broken/missing ZWaveDevice to replace</param>
	<returns>A ZWaveDevice object representing the new device, or Nothing if the operation failed</returns>
	<remarks></remarks>
</member><member name="M:ControlThink.ZWave.ZWaveController.RediscoverDevice(ControlThink.ZWave.Devices.ZWaveDevice)">
	<summary>
 Rediscovers a ZWaveDevice in the network and updates the map of its direct neighbors
 </summary>
	<param name="device">The ZWaveDevice to rediscover</param>
	<returns>True if the rediscovery succeeded; False if the device could not be rediscovered.</returns>
	<remarks></remarks>
</member><member name="M:ControlThink.ZWave.ZWaveController.Disconnect">
	<summary>
 Disconnects from the connected Z-Wave connection.
 </summary>
	<remarks></remarks>
</member><member name="M:ControlThink.ZWave.ZWaveController.Dispose">
	<summary>
 Releases all resources used by the ControlThink.ZWave.ZWaveController.
 </summary>
	<remarks></remarks>
</member><member name="M:ControlThink.ZWave.ZWaveController.HardReset">
	<summary>
 Resets the ZWaveController to its factory defaults.
 </summary>
	<remarks></remarks>
</member><member name="M:ControlThink.ZWave.ZWaveController.HardReset(System.Boolean)">
	<summary>
 Resets the ZWaveController to its factory defaults.
 </summary>
	<param name="alwaysOnAndStationary">Set to True if this ZWaveController will always remain in the same location and powered on.</param>
	<remarks>The alwaysOnAndStationary property determines whether a device will be used as a stationary repeater in the network.  If it is set to True but the device is powered down or physically moved, 
 network slowdowns and/or failures may occur.</remarks>
</member><member name="M:ControlThink.ZWave.ZWaveController.BeginReceiveConfiguration(System.AsyncCallback,System.Object)">
	<summary>
 Begins an asynchronous operation to join/leave a network or receive an updated network map.
 </summary>
	<param name="requestCallback">An optional asynchronous callback, to be called when the operation is complete</param>
	<param name="stateObject">A user-provided object that distinguishes this particular asynchronous request from other requests</param>
	<returns>A System.IAsyncResult that references the asynchronous operation</returns>
	<remarks>If the ZWaveController is currently a Secondary controller on a network, it must first be HardReset before it can join another network using this method.</remarks>
</member><member name="M:ControlThink.ZWave.ZWaveController.EndReceiveConfiguration(System.IAsyncResult)">
	<summary>
 Ends a pending network join/leave/update operation
 </summary>
	<param name="asyncResult">A System.IAsyncResult that references the asynchronous operation</param>
	<returns>True if the operation succeeded; False if the operation failed.</returns>
	<remarks></remarks>
</member><member name="M:ControlThink.ZWave.ZWaveController.EndReceiveConfiguration(System.IAsyncResult,ControlThink.ZWave.ZWaveController.ReplicationGroup[]@,ControlThink.ZWave.ZWaveController.ReplicationScene[]@)">
	<summary>
 Ends a pending network join/leave/update operation, and saves any scenes or groups captured during the replication process.
 </summary>
	<param name="asyncResult">&gt;A System.IAsyncResult that references the asynchronous operation</param>
	<param name="replicationGroups">An empty array of ReplicationGroup objects, which will be replaced by any group information captured during the replication process.</param>
	<param name="replicationScenes">An empty array of ReplicationScenes objects, which will be replaced by any scene information captured during the replication process.</param>
	<returns>True if the operation succeeded; False if the operation failed.</returns>
	<remarks></remarks>
</member><member name="M:ControlThink.ZWave.ZWaveController.ReceiveConfiguration">
	<summary>
 Causes the ZWaveController to join/leave a network or receive an updated network map.
 </summary>
	<returns>True if the operation succeeded; False if the operation failed.</returns>
	<remarks>If the ZWaveController is currently a Secondary controller on a network, it must first be HardReset before it can join another network using this method.</remarks>
</member><member name="M:ControlThink.ZWave.ZWaveController.ReceiveConfiguration(ControlThink.ZWave.ZWaveController.ReplicationGroup[]@,ControlThink.ZWave.ZWaveController.ReplicationScene[]@)">
	<summary>
 Causes the ZWaveController to join/leave a network or receive an updated network map, and saves any scenes or groups captured during the replication process.
 </summary>
	<param name="replicationGroups">An empty array of ReplicationGroup objects, which will be replaced by any group information captured during the replication process.</param>
	<param name="replicationScenes">An empty array of ReplicationScenes objects, which will be replaced by any scene information captured during the replication process.</param>
	<returns></returns>
	<remarks>If the ZWaveController is currently a Secondary controller on a network, it must first be HardReset before it can join another network using this method.</remarks>
</member><member name="M:ControlThink.ZWave.ZWaveController.BeginCreateNewPrimaryController(System.AsyncCallback,System.Object)">
	<summary>
 Begins an asynchronous operation to create a new Primary controller.
 </summary>
	<param name="requestCallback">An optional asynchronous callback, to be called when the operation is complete</param>
	<param name="stateObject">A user-provided object that distinguishes this particular asynchronous request from other requests</param>
	<returns>A System.IAsyncResult that references the asynchronous operation</returns>
	<remarks>The ZWaveController must be a Static Update Controller (network backup) to create a new Primary controller.</remarks>
</member><member name="M:ControlThink.ZWave.ZWaveController.EndCreateNewPrimaryController(System.IAsyncResult)">
	<summary>
 Ends a pending operation to create a new Primary controller.
 </summary>
	<param name="asyncResult">A System.IAsyncResult that references the asynchronous operation</param>
	<returns>A ZWaveDevice object representing the new Primary controller, or Nothing if the operation failed.</returns>
	<remarks></remarks>
</member><member name="M:ControlThink.ZWave.ZWaveController.CreateNewPrimaryController">
	<summary>
 Creates a new Primary controller.
 </summary>
	<returns>A ZWaveDevice object representing the new Primary controller, or Nothing if the operation failed.</returns>
	<remarks>The ZWaveController must be a Static Update Controller (network backup) to create a new Primary controller.</remarks>
</member><member name="M:ControlThink.ZWave.ZWaveController.CreateNewPrimaryController(ControlThink.ZWave.ZWaveController.ReplicationGroup[],ControlThink.ZWave.ZWaveController.ReplicationScene[])">
	<summary>
 Creates a new Primary controller, and copies scenes and/or groups during the replication process.
 </summary>
	<param name="replicationGroups">An array of ReplicationGroup objects, which will be transmitted to the target controller during the replication process.</param>
	<param name="replicationScenes">An array of ReplicationScene objects, which will be transmitted to the target controller during the replication process.</param>
	<returns>A ZWaveDevice object representing the new Primary controller, or Nothing if the operation failed.</returns>
	<remarks>The ZWaveController must be a Static Update Controller (network backup) to create a new Primary controller.</remarks>
</member><member name="M:ControlThink.ZWave.ZWaveController.BeginTransferPrimaryRole(System.AsyncCallback,System.Object)">
	<summary>
 Begins an asynchronous operation to transfer the Primary role to another controller.
 </summary>
	<param name="requestCallback">An optional asynchronous callback, to be called when the operation is complete</param>
	<param name="stateObject">A user-provided object that distinguishes this particular asynchronous request from other requests</param>
	<returns>A System.IAsyncResult that references the asynchronous operation</returns>
	<remarks>The ZWaveController must be the Primary controller to transfer the Primary role to another controller.</remarks>
</member><member name="M:ControlThink.ZWave.ZWaveController.EndTransferPrimaryRole(System.IAsyncResult)">
	<summary>
 Ends a pending transfer of the Primary role to another controller
 </summary>
	<param name="asyncResult">A System.IAsyncResult that references the asynchronous operation</param>
	<returns>A ZWaveDevice object representing the new Primary controller, or Nothing if the operation failed.</returns>
	<remarks></remarks>
</member><member name="M:ControlThink.ZWave.ZWaveController.TransferPrimaryRole">
	<summary>
 Transfers the Primary role to another controller.
 </summary>
	<returns>A ZWaveDevice object representing the new Primary controller, or Nothing if the operation failed.</returns>
	<remarks>The ZWaveController must be the Primary controller to transfer the Primary role to another controller.</remarks>
</member><member name="M:ControlThink.ZWave.ZWaveController.TransferPrimaryRole(ControlThink.ZWave.ZWaveController.ReplicationGroup[],ControlThink.ZWave.ZWaveController.ReplicationScene[])">
	<summary>
 Transfers the Primary role to another controller, and copies scenes and/or groups during the replication process.
 </summary>
	<param name="replicationGroups">An array of ReplicationGroup objects, which will be transmitted to the target controller during the replication process.</param>
	<param name="replicationScenes">An array of ReplicationScene objects, which will be transmitted to the target controller during the replication process.</param>
	<returns>A ZWaveDevice object representing the new Primary controller, or Nothing if the operation failed.</returns>
	<remarks>The ZWaveController must be the Primary controller to transfer the Primary role to another controller.</remarks>
</member><member name="M:ControlThink.ZWave.ZWaveController.AbortCreateNewPrimaryController">
	<summary>
 Aborts a pending operation to create a new Primary controller
 </summary>
	<remarks></remarks>
</member><member name="M:ControlThink.ZWave.ZWaveController.AbortTransferPrimaryRole">
	<summary>
 Aborts a pending operation to transfer the Primary role to another controller.
 </summary>
	<remarks></remarks>
</member><member name="M:ControlThink.ZWave.ZWaveController.AbortReceiveConfiguration">
	<summary>
 Aborts a pending operation to join/leave/update the network
 </summary>
	<remarks></remarks>
</member><member name="M:ControlThink.ZWave.ZWaveController.AbortAddController">
	<summary>
 Aborts a pending operation to add a controller to the network.
 </summary>
	<remarks></remarks>
</member><member name="M:ControlThink.ZWave.ZWaveController.AbortAddDevice">
	<summary>
 Aborts a pending operation to add a device to the network.
 </summary>
	<remarks></remarks>
</member><member name="M:ControlThink.ZWave.ZWaveController.AbortReplaceFailedDevice">
	<summary>
 Aborts a pending operation to replace a broken device in the network.
 </summary>
	<remarks></remarks>
</member><member name="M:ControlThink.ZWave.ZWaveController.AbortRemoveController">
	<summary>
 Aborts a pending operation to remove a controller from the network.
 </summary>
	<remarks></remarks>
</member><member name="M:ControlThink.ZWave.ZWaveController.AbortRemoveDevice">
	<summary>
 Aborts a pending operation to remove a device from the network.
 </summary>
	<remarks></remarks>
</member><member name="M:ControlThink.ZWave.ZWaveController.BeginAddController(System.AsyncCallback,System.Object)">
	<summary>
 Begins an asynchronous operation to add a controller to the network.
 </summary>
	<param name="requestCallback">An optional asynchronous callback, to be called when the operation is complete</param>
	<param name="stateObject">A user-provided object that distinguishes this particular asynchronous request from other requests</param>
	<returns>A System.IAsyncResult that references the asynchronous operation</returns>
	<remarks>The ZWaveController must be the Primary controller to add a controller to the network. Also, the target remote must be
 put into replication receive mode, which is sometimes known as Join Network.</remarks>
</member><member name="M:ControlThink.ZWave.ZWaveController.BeginAddController(ControlThink.ZWave.ZWaveController.ReplicationGroup[],ControlThink.ZWave.ZWaveController.ReplicationScene[],System.AsyncCallback,System.Object)">
	<summary>
 Begins an asynchronous operation to add a controller to the network, and copies scenes and/or groups during the replication process.
 </summary>
	<param name="replicationGroups">An array of ReplicationGroup objects, which will be transmitted to the target controller during the replication process.</param>
	<param name="replicationScenes">An array of ReplicationScene objects, which will be transmitted to the target controller during the replication process.</param>
	<param name="requestCallback">An optional asynchronous callback, to be called when the operation is complete</param>
	<param name="stateObject">A user-provided object that distinguishes this particular asynchronous request from other requests</param>
	<returns>A System.IAsyncResult that references the asynchronous operation</returns>
	<remarks>The ZWaveController must be the Primary controller to add a controller to the network. Also, the target remote must be
 put into replication receive mode, which is sometimes known as Join Network.</remarks>
</member><member name="M:ControlThink.ZWave.ZWaveController.EndAddController(System.IAsyncResult)">
	<summary>
 Ends a pending addition of a controller to the network
 </summary>
	<param name="asyncResult">A System.IAsyncResult that references the asynchronous operation</param>
	<returns>A ZWaveDevice object representing the newly-added controller, or Nothing if the operation failed.</returns>
	<remarks></remarks>
</member><member name="M:ControlThink.ZWave.ZWaveController.AddController">
	<summary>
 Adds a controller to the network, or updates the network map in an existing controller on the network.
 </summary>
	<returns>A ZWaveDevice object representing the newly-added controller, or Nothing if the operation failed.</returns>
	<remarks>The ZWaveController must be the Primary controller to add a controller to the network. Also, the target remote must be
 put into replication receive mode, which is sometimes known as Join Network (or Receive Network Update).</remarks>
</member><member name="M:ControlThink.ZWave.ZWaveController.AddController(ControlThink.ZWave.ZWaveController.ReplicationGroup[],ControlThink.ZWave.ZWaveController.ReplicationScene[])">
	<summary>
 Adds a controller to the network, or updates the network map in an existing controller on the network.
 </summary>
	<param name="replicationGroups">An array of ReplicationGroup objects, which will be transmitted to the target controller during the replication process.</param>
	<param name="replicationScenes">An array of ReplicationScene objects, which will be transmitted to the target controller during the replication process.</param>
	<returns>A ZWaveDevice object representing the newly-added controller, or Nothing if the operation failed.</returns>
	<remarks>The ZWaveController must be the Primary controller to add a controller to the network. Also, the target remote must be
 put into replication receive mode, which is sometimes known as Join Network (or Receive Network Update).</remarks>
</member><member name="M:ControlThink.ZWave.ZWaveController.BeginAddDevice(System.AsyncCallback,System.Object)">
	<summary>
 Begins an asynchronous operation to add a device to the network.
 </summary>
	<param name="requestCallback">An optional asynchronous callback, to be called when the operation is complete</param>
	<param name="stateObject">A user-provided object that distinguishes this particular asynchronous request from other requests</param>
	<returns>A System.IAsyncResult that references the asynchronous operation</returns>
	<remarks>The ZWaveController must be the Primary controller to add a device to the network.  Once this function is called, press
 the program button on the target device to complete the addition process.</remarks>
</member><member name="M:ControlThink.ZWave.ZWaveController.EndAddDevice(System.IAsyncResult)">
	<summary>
 Ends a pending addition of a device to the network
 </summary>
	<param name="asyncResult">A System.IAsyncResult that references the asynchronous operation</param>
	<returns>A ZWaveDevice object representing the newly-added device, or Nothing if the operation failed.</returns>
	<remarks></remarks>
</member><member name="M:ControlThink.ZWave.ZWaveController.AddDevice">
	<summary>
 Adds a device to the network.
 </summary>
	<returns>A ZWaveDevice object representing the newly-added device, or Nothing if the operation failed.</returns>
	<remarks>The ZWaveController must be the Primary controller to add a device to the network.  Once this function is called, press
 the program button on the target device to complete the addition process.</remarks>
</member><member name="M:ControlThink.ZWave.ZWaveController.BeginRemoveController(System.AsyncCallback,System.Object)">
	<summary>
 Begins an asynchronous operation to remove a controller from the network.
 </summary>
	<param name="requestCallback">An optional asynchronous callback, to be called when the operation is complete</param>
	<param name="stateObject">A user-provided object that distinguishes this particular asynchronous request from other requests</param>
	<returns>A System.IAsyncResult that references the asynchronous operation</returns>
	<remarks>The ZWaveController must be the Primary controller to remove a controller from the network. Also, the target remote must be
 put into replication receive mode, which is sometimes known as Receive Network Update or Leave Network.</remarks>
</member><member name="M:ControlThink.ZWave.ZWaveController.EndRemoveController(System.IAsyncResult)">
	<summary>
 Ends a pending removal of a controller from the network
 </summary>
	<param name="asyncResult">A System.IAsyncResult that references the asynchronous operation</param>
	<returns>A ZWaveDevice object representing the removed controller, or Nothing if the operation failed.</returns>
	<remarks></remarks>
</member><member name="M:ControlThink.ZWave.ZWaveController.RemoveController">
	<summary>
 Removes a controller from the network.
 </summary>
	<returns>A ZWaveDevice object representing the removed controller, or Nothing if the operation failed.</returns>
	<remarks>The ZWaveController must be the Primary controller to remove a controller from the network. Also, the target remote must be
 put into replication receive mode, which is sometimes known as Receive Network Update or Leave Network.</remarks>
</member><member name="M:ControlThink.ZWave.ZWaveController.BeginRemoveDevice(System.AsyncCallback,System.Object)">
	<summary>
 Begins an asynchronous operation to remove a device from the network.
 </summary>
	<param name="requestCallback">An optional asynchronous callback, to be called when the operation is complete</param>
	<param name="stateObject">A user-provided object that distinguishes this particular asynchronous request from other requests</param>
	<returns>A System.IAsyncResult that references the asynchronous operation</returns>
	<remarks>The ZWaveController must be the Primary controller to remove a device from the network.  Once this function is called, press
 the program button on the target device to complete the removal process.</remarks>
</member><member name="M:ControlThink.ZWave.ZWaveController.EndRemoveDevice(System.IAsyncResult)">
	<summary>
 Ends a pending removal of a device from the network
 </summary>
	<param name="asyncResult">A System.IAsyncResult that references the asynchronous operation</param>
	<returns>A ZWaveDevice object representing the removed device, or Nothing if the operation failed.</returns>
	<remarks></remarks>
</member><member name="M:ControlThink.ZWave.ZWaveController.RemoveDevice">
	<summary>
 Removes a device from the network.
 </summary>
	<returns>A ZWaveDevice object representing the removed device, or Nothing if the operation failed.</returns>
	<remarks>The ZWaveController must be the Primary controller to remove a device from the network.  Once this function is called, press
 the program button on the target device to complete the removal process.</remarks>
</member><member name="P:ControlThink.ZWave.ZWaveController.Level">
	<summary>
 Gets or sets the virtual indicator level.
 </summary>
	<value>The virtual indicator level.  Valid values are 0 (off), 255 (on) and 1 to 99 (1 = 1%, 99 = 100%).</value>
	<returns>The virtual indicator level.  Valid values are 0 (off), 255 (on) and 1 to 99 (1 = 1%, 99 = 100%).</returns>
	<remarks>To associate this level with a scene on a remote control, follow the standard instructions for adding a device
 to a scene as provided in the remote's user's manual.  Then, call the EmitDeviceInformation function to alert the remote
 that you would like this ZWaveController and this specific level to be associated with the scene.</remarks>
</member><member name="P:ControlThink.ZWave.ZWaveController.ActiveSceneID">
	<summary>
 Gets or sets the active Scene ID.
 </summary>
	<value>The active Scene ID.  Value values are 0 (no active scene) and 1 to 255.</value>
	<returns>The active scene ID.  Value values are 0 (no active scene) and 1 to 255.</returns>
	<remarks></remarks>
</member><member name="M:ControlThink.ZWave.ZWaveController.EmitDeviceInformation">
	<summary>
 Emits the ZWaveController's device information.
 </summary>
	<remarks>This is often used to identify a device or associate its level with a particular button on a remote, etc.</remarks>
</member><member name="P:ControlThink.ZWave.ZWaveController.IsConnected">
	<summary>
 Gets whether the ZWaveController is currently connected to a USB dongle, Ethernet bridge, etc.
 </summary>
	<value>True if the ZWaveController is currently connected; otherwise, False.</value>
	<returns>True if the ZWaveController is currently connected; otherwise, False.</returns>
	<remarks></remarks>
</member><member name="P:ControlThink.ZWave.ZWaveController.Devices">
	<summary>
 Gets a collection of all the devices in the ZWaveController's network which are known to this ZWaveController.
 </summary>
	<value>A collection of all the devices known to the ZWaveController in its network.</value>
	<returns>A collection of all the devices known to the ZWaveController in its network.</returns>
	<remarks>If this ZWaveController is a secondary controller, you can update its network map by adding it to the network again and calling the ReceiveConfiguration function.</remarks>
</member><member name="P:ControlThink.ZWave.ZWaveController.HomeID">
	<summary>
 Gets the 32-bit Home ID of the ZWaveController's network.
 </summary>
	<value>The 32-bit Home ID of the ZWaveController's network</value>
	<returns>The 32-bit Home ID of the ZWaveController's network</returns>
	<remarks>This value is assigned by the Primary controller of the network, and is stored in all network devices.</remarks>
</member><member name="P:ControlThink.ZWave.ZWaveController.NodeID">
	<summary>
 Gets the Node ID of the ZWaveController.
 </summary>
	<value>The Node ID of the ZWaveController</value>
	<returns>The Node ID of the ZWaveController</returns>
	<remarks>Each device in the network is given a network-unique Node ID when it is added to the network.  Combined with
 the Home ID, this gives each device a globally unique identity.</remarks>
</member><member name="P:ControlThink.ZWave.ZWaveController.IsPrimaryController">
	<summary>
 Indicates if the controller is the Primary Controller in the network.
 </summary>
	<value></value>
	<returns></returns>
	<remarks>The ZWaveController must be a Primary Controller to add or remove devices from the network.</remarks>
</member><member name="P:ControlThink.ZWave.ZWaveController.IsStaticUpdateController">
	<summary>
 Indicates if the controller is the Static Update Controller (SUC) in the network.
 </summary>
	<value></value>
	<returns></returns>
	<remarks>The Static Update Controller can create a new Primary controller if the Primary controller is lost or broken.</remarks>
</member><member name="P:ControlThink.ZWave.ZWaveController.SynchronizingObject">
	<summary>
 Gets or sets the object used to marshal event-handler calls. (optional)
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:ControlThink.ZWave.ZWaveController">
	<summary>
 Provides access to communicate with a Z-Wave network through an attached Z-Wave USB dongle, Ethernet bridge, etc.
 </summary>
	<remarks></remarks>
</member><member name="P:ControlThink.ZWave.Licensing.LicenseKey">
	<summary>
 Gets the license key used by this managed code driver.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:ControlThink.ZWave.Licensing">
	<summary>
 Provides access to the current licensing information for the managed code driver.
 </summary>
	<remarks></remarks>
</member>
</members>
</doc>